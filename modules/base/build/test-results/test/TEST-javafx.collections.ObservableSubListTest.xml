<?xml version="1.0" encoding="UTF-8"?>
<testsuite name="javafx.collections.ObservableSubListTest" tests="240" skipped="0" failures="0" errors="0" timestamp="2018-12-24T19:03:15" hostname="DESKTOP-CFPL3NK" time="0.025">
  <properties/>
  <testcase name="testEquals[0]" classname="javafx.collections.ObservableSubListTest" time="0.0"/>
  <testcase name="testEqualsWithNull[0]" classname="javafx.collections.ObservableSubListTest" time="0.0"/>
  <testcase name="testRemoveObjectNotExists[0]" classname="javafx.collections.ObservableSubListTest" time="0.0"/>
  <testcase name="testConcurrencyRemove0[0]" classname="javafx.collections.ObservableSubListTest" time="0.0"/>
  <testcase name="testConcurrencyRemoveAll[0]" classname="javafx.collections.ObservableSubListTest" time="0.0"/>
  <testcase name="testEqualsOnLongerList[0]" classname="javafx.collections.ObservableSubListTest" time="0.0"/>
  <testcase name="testConcurrencyContains[0]" classname="javafx.collections.ObservableSubListTest" time="0.0"/>
  <testcase name="testConcurrencyRetainAll[0]" classname="javafx.collections.ObservableSubListTest" time="0.0"/>
  <testcase name="testConcurrencyRemove[0]" classname="javafx.collections.ObservableSubListTest" time="0.0"/>
  <testcase name="testConcurrencySet[0]" classname="javafx.collections.ObservableSubListTest" time="0.0"/>
  <testcase name="testEqualsOnShorterList[0]" classname="javafx.collections.ObservableSubListTest" time="0.0"/>
  <testcase name="testEqualsWithNullOnShorterList[0]" classname="javafx.collections.ObservableSubListTest" time="0.0"/>
  <testcase name="testEqualsOnAnotherType[0]" classname="javafx.collections.ObservableSubListTest" time="0.0"/>
  <testcase name="testIndexOfWithNull[0]" classname="javafx.collections.ObservableSubListTest" time="0.0"/>
  <testcase name="testRemoveObjectExists[0]" classname="javafx.collections.ObservableSubListTest" time="0.0"/>
  <testcase name="testSubSubListAdd[0]" classname="javafx.collections.ObservableSubListTest" time="0.0"/>
  <testcase name="testSubSubListRemove[0]" classname="javafx.collections.ObservableSubListTest" time="0.0"/>
  <testcase name="testConcurrencyGet[0]" classname="javafx.collections.ObservableSubListTest" time="0.0"/>
  <testcase name="testEqualsWithNullOnLongerList[0]" classname="javafx.collections.ObservableSubListTest" time="0.0"/>
  <testcase name="testConcurrencyAdd[0]" classname="javafx.collections.ObservableSubListTest" time="0.001"/>
  <testcase name="testConcurrencyAddAll[0]" classname="javafx.collections.ObservableSubListTest" time="0.0"/>
  <testcase name="testConcurrencyClear[0]" classname="javafx.collections.ObservableSubListTest" time="0.0"/>
  <testcase name="testSubSubListSet[0]" classname="javafx.collections.ObservableSubListTest" time="0.0"/>
  <testcase name="testConcurrencyContainsAll[0]" classname="javafx.collections.ObservableSubListTest" time="0.0"/>
  <testcase name="testConcurrencyIsEmpty[0]" classname="javafx.collections.ObservableSubListTest" time="0.0"/>
  <testcase name="testConcurrencyIterator[0]" classname="javafx.collections.ObservableSubListTest" time="0.0"/>
  <testcase name="testConcurrencyRetainSize[0]" classname="javafx.collections.ObservableSubListTest" time="0.0"/>
  <testcase name="testIndexOf[0]" classname="javafx.collections.ObservableSubListTest" time="0.0"/>
  <testcase name="testRangeTooLow[0]" classname="javafx.collections.ObservableSubListTest" time="0.0"/>
  <testcase name="testSubSubList[0]" classname="javafx.collections.ObservableSubListTest" time="0.0"/>
  <testcase name="testWidestRange[0]" classname="javafx.collections.ObservableSubListTest" time="0.0"/>
  <testcase name="testRemoveIndex[0]" classname="javafx.collections.ObservableSubListTest" time="0.0"/>
  <testcase name="testRangeTooHigh[0]" classname="javafx.collections.ObservableSubListTest" time="0.0"/>
  <testcase name="testContainsAll[0]" classname="javafx.collections.ObservableSubListTest" time="0.0"/>
  <testcase name="testContainsNull[0]" classname="javafx.collections.ObservableSubListTest" time="0.001"/>
  <testcase name="testLastIndexOf[0]" classname="javafx.collections.ObservableSubListTest" time="0.0"/>
  <testcase name="testBadRange[0]" classname="javafx.collections.ObservableSubListTest" time="0.0"/>
  <testcase name="testToString[0]" classname="javafx.collections.ObservableSubListTest" time="0.0"/>
  <testcase name="testSize[0]" classname="javafx.collections.ObservableSubListTest" time="0.0"/>
  <testcase name="testIsEmpty[0]" classname="javafx.collections.ObservableSubListTest" time="0.0"/>
  <testcase name="testAdd[0]" classname="javafx.collections.ObservableSubListTest" time="0.0"/>
  <testcase name="testClear[0]" classname="javafx.collections.ObservableSubListTest" time="0.0"/>
  <testcase name="testSet[0]" classname="javafx.collections.ObservableSubListTest" time="0.0"/>
  <testcase name="testRetainAll[0]" classname="javafx.collections.ObservableSubListTest" time="0.0"/>
  <testcase name="testRemoveNull[0]" classname="javafx.collections.ObservableSubListTest" time="0.0"/>
  <testcase name="testAddAll[0]" classname="javafx.collections.ObservableSubListTest" time="0.0"/>
  <testcase name="testRemoveAll[0]" classname="javafx.collections.ObservableSubListTest" time="0.0"/>
  <testcase name="testContains[0]" classname="javafx.collections.ObservableSubListTest" time="0.0"/>
  <testcase name="testEquals[1]" classname="javafx.collections.ObservableSubListTest" time="0.0"/>
  <testcase name="testEqualsWithNull[1]" classname="javafx.collections.ObservableSubListTest" time="0.0"/>
  <testcase name="testRemoveObjectNotExists[1]" classname="javafx.collections.ObservableSubListTest" time="0.0"/>
  <testcase name="testConcurrencyRemove0[1]" classname="javafx.collections.ObservableSubListTest" time="0.0"/>
  <testcase name="testConcurrencyRemoveAll[1]" classname="javafx.collections.ObservableSubListTest" time="0.0"/>
  <testcase name="testEqualsOnLongerList[1]" classname="javafx.collections.ObservableSubListTest" time="0.0"/>
  <testcase name="testConcurrencyContains[1]" classname="javafx.collections.ObservableSubListTest" time="0.0"/>
  <testcase name="testConcurrencyRetainAll[1]" classname="javafx.collections.ObservableSubListTest" time="0.0"/>
  <testcase name="testConcurrencyRemove[1]" classname="javafx.collections.ObservableSubListTest" time="0.0"/>
  <testcase name="testConcurrencySet[1]" classname="javafx.collections.ObservableSubListTest" time="0.001"/>
  <testcase name="testEqualsOnShorterList[1]" classname="javafx.collections.ObservableSubListTest" time="0.0"/>
  <testcase name="testEqualsWithNullOnShorterList[1]" classname="javafx.collections.ObservableSubListTest" time="0.0"/>
  <testcase name="testEqualsOnAnotherType[1]" classname="javafx.collections.ObservableSubListTest" time="0.0"/>
  <testcase name="testIndexOfWithNull[1]" classname="javafx.collections.ObservableSubListTest" time="0.0"/>
  <testcase name="testRemoveObjectExists[1]" classname="javafx.collections.ObservableSubListTest" time="0.0"/>
  <testcase name="testSubSubListAdd[1]" classname="javafx.collections.ObservableSubListTest" time="0.0"/>
  <testcase name="testSubSubListRemove[1]" classname="javafx.collections.ObservableSubListTest" time="0.0"/>
  <testcase name="testConcurrencyGet[1]" classname="javafx.collections.ObservableSubListTest" time="0.0"/>
  <testcase name="testEqualsWithNullOnLongerList[1]" classname="javafx.collections.ObservableSubListTest" time="0.0"/>
  <testcase name="testConcurrencyAdd[1]" classname="javafx.collections.ObservableSubListTest" time="0.0"/>
  <testcase name="testConcurrencyAddAll[1]" classname="javafx.collections.ObservableSubListTest" time="0.0"/>
  <testcase name="testConcurrencyClear[1]" classname="javafx.collections.ObservableSubListTest" time="0.0"/>
  <testcase name="testSubSubListSet[1]" classname="javafx.collections.ObservableSubListTest" time="0.0"/>
  <testcase name="testConcurrencyContainsAll[1]" classname="javafx.collections.ObservableSubListTest" time="0.001"/>
  <testcase name="testConcurrencyIsEmpty[1]" classname="javafx.collections.ObservableSubListTest" time="0.0"/>
  <testcase name="testConcurrencyIterator[1]" classname="javafx.collections.ObservableSubListTest" time="0.0"/>
  <testcase name="testConcurrencyRetainSize[1]" classname="javafx.collections.ObservableSubListTest" time="0.0"/>
  <testcase name="testIndexOf[1]" classname="javafx.collections.ObservableSubListTest" time="0.0"/>
  <testcase name="testRangeTooLow[1]" classname="javafx.collections.ObservableSubListTest" time="0.0"/>
  <testcase name="testSubSubList[1]" classname="javafx.collections.ObservableSubListTest" time="0.0"/>
  <testcase name="testWidestRange[1]" classname="javafx.collections.ObservableSubListTest" time="0.0"/>
  <testcase name="testRemoveIndex[1]" classname="javafx.collections.ObservableSubListTest" time="0.0"/>
  <testcase name="testRangeTooHigh[1]" classname="javafx.collections.ObservableSubListTest" time="0.0"/>
  <testcase name="testContainsAll[1]" classname="javafx.collections.ObservableSubListTest" time="0.0"/>
  <testcase name="testContainsNull[1]" classname="javafx.collections.ObservableSubListTest" time="0.0"/>
  <testcase name="testLastIndexOf[1]" classname="javafx.collections.ObservableSubListTest" time="0.0"/>
  <testcase name="testBadRange[1]" classname="javafx.collections.ObservableSubListTest" time="0.0"/>
  <testcase name="testToString[1]" classname="javafx.collections.ObservableSubListTest" time="0.0"/>
  <testcase name="testSize[1]" classname="javafx.collections.ObservableSubListTest" time="0.0"/>
  <testcase name="testIsEmpty[1]" classname="javafx.collections.ObservableSubListTest" time="0.0"/>
  <testcase name="testAdd[1]" classname="javafx.collections.ObservableSubListTest" time="0.0"/>
  <testcase name="testClear[1]" classname="javafx.collections.ObservableSubListTest" time="0.0"/>
  <testcase name="testSet[1]" classname="javafx.collections.ObservableSubListTest" time="0.0"/>
  <testcase name="testRetainAll[1]" classname="javafx.collections.ObservableSubListTest" time="0.0"/>
  <testcase name="testRemoveNull[1]" classname="javafx.collections.ObservableSubListTest" time="0.0"/>
  <testcase name="testAddAll[1]" classname="javafx.collections.ObservableSubListTest" time="0.001"/>
  <testcase name="testRemoveAll[1]" classname="javafx.collections.ObservableSubListTest" time="0.0"/>
  <testcase name="testContains[1]" classname="javafx.collections.ObservableSubListTest" time="0.0"/>
  <testcase name="testEquals[2]" classname="javafx.collections.ObservableSubListTest" time="0.0"/>
  <testcase name="testEqualsWithNull[2]" classname="javafx.collections.ObservableSubListTest" time="0.0"/>
  <testcase name="testRemoveObjectNotExists[2]" classname="javafx.collections.ObservableSubListTest" time="0.0"/>
  <testcase name="testConcurrencyRemove0[2]" classname="javafx.collections.ObservableSubListTest" time="0.001"/>
  <testcase name="testConcurrencyRemoveAll[2]" classname="javafx.collections.ObservableSubListTest" time="0.0"/>
  <testcase name="testEqualsOnLongerList[2]" classname="javafx.collections.ObservableSubListTest" time="0.0"/>
  <testcase name="testConcurrencyContains[2]" classname="javafx.collections.ObservableSubListTest" time="0.0"/>
  <testcase name="testConcurrencyRetainAll[2]" classname="javafx.collections.ObservableSubListTest" time="0.0"/>
  <testcase name="testConcurrencyRemove[2]" classname="javafx.collections.ObservableSubListTest" time="0.0"/>
  <testcase name="testConcurrencySet[2]" classname="javafx.collections.ObservableSubListTest" time="0.002"/>
  <testcase name="testEqualsOnShorterList[2]" classname="javafx.collections.ObservableSubListTest" time="0.0"/>
  <testcase name="testEqualsWithNullOnShorterList[2]" classname="javafx.collections.ObservableSubListTest" time="0.0"/>
  <testcase name="testEqualsOnAnotherType[2]" classname="javafx.collections.ObservableSubListTest" time="0.0"/>
  <testcase name="testIndexOfWithNull[2]" classname="javafx.collections.ObservableSubListTest" time="0.0"/>
  <testcase name="testRemoveObjectExists[2]" classname="javafx.collections.ObservableSubListTest" time="0.0"/>
  <testcase name="testSubSubListAdd[2]" classname="javafx.collections.ObservableSubListTest" time="0.0"/>
  <testcase name="testSubSubListRemove[2]" classname="javafx.collections.ObservableSubListTest" time="0.0"/>
  <testcase name="testConcurrencyGet[2]" classname="javafx.collections.ObservableSubListTest" time="0.0"/>
  <testcase name="testEqualsWithNullOnLongerList[2]" classname="javafx.collections.ObservableSubListTest" time="0.0"/>
  <testcase name="testConcurrencyAdd[2]" classname="javafx.collections.ObservableSubListTest" time="0.0"/>
  <testcase name="testConcurrencyAddAll[2]" classname="javafx.collections.ObservableSubListTest" time="0.0"/>
  <testcase name="testConcurrencyClear[2]" classname="javafx.collections.ObservableSubListTest" time="0.0"/>
  <testcase name="testSubSubListSet[2]" classname="javafx.collections.ObservableSubListTest" time="0.0"/>
  <testcase name="testConcurrencyContainsAll[2]" classname="javafx.collections.ObservableSubListTest" time="0.0"/>
  <testcase name="testConcurrencyIsEmpty[2]" classname="javafx.collections.ObservableSubListTest" time="0.001"/>
  <testcase name="testConcurrencyIterator[2]" classname="javafx.collections.ObservableSubListTest" time="0.0"/>
  <testcase name="testConcurrencyRetainSize[2]" classname="javafx.collections.ObservableSubListTest" time="0.0"/>
  <testcase name="testIndexOf[2]" classname="javafx.collections.ObservableSubListTest" time="0.0"/>
  <testcase name="testRangeTooLow[2]" classname="javafx.collections.ObservableSubListTest" time="0.0"/>
  <testcase name="testSubSubList[2]" classname="javafx.collections.ObservableSubListTest" time="0.0"/>
  <testcase name="testWidestRange[2]" classname="javafx.collections.ObservableSubListTest" time="0.0"/>
  <testcase name="testRemoveIndex[2]" classname="javafx.collections.ObservableSubListTest" time="0.0"/>
  <testcase name="testRangeTooHigh[2]" classname="javafx.collections.ObservableSubListTest" time="0.001"/>
  <testcase name="testContainsAll[2]" classname="javafx.collections.ObservableSubListTest" time="0.0"/>
  <testcase name="testContainsNull[2]" classname="javafx.collections.ObservableSubListTest" time="0.0"/>
  <testcase name="testLastIndexOf[2]" classname="javafx.collections.ObservableSubListTest" time="0.0"/>
  <testcase name="testBadRange[2]" classname="javafx.collections.ObservableSubListTest" time="0.0"/>
  <testcase name="testToString[2]" classname="javafx.collections.ObservableSubListTest" time="0.0"/>
  <testcase name="testSize[2]" classname="javafx.collections.ObservableSubListTest" time="0.0"/>
  <testcase name="testIsEmpty[2]" classname="javafx.collections.ObservableSubListTest" time="0.001"/>
  <testcase name="testAdd[2]" classname="javafx.collections.ObservableSubListTest" time="0.0"/>
  <testcase name="testClear[2]" classname="javafx.collections.ObservableSubListTest" time="0.0"/>
  <testcase name="testSet[2]" classname="javafx.collections.ObservableSubListTest" time="0.0"/>
  <testcase name="testRetainAll[2]" classname="javafx.collections.ObservableSubListTest" time="0.0"/>
  <testcase name="testRemoveNull[2]" classname="javafx.collections.ObservableSubListTest" time="0.0"/>
  <testcase name="testAddAll[2]" classname="javafx.collections.ObservableSubListTest" time="0.0"/>
  <testcase name="testRemoveAll[2]" classname="javafx.collections.ObservableSubListTest" time="0.0"/>
  <testcase name="testContains[2]" classname="javafx.collections.ObservableSubListTest" time="0.001"/>
  <testcase name="testEquals[3]" classname="javafx.collections.ObservableSubListTest" time="0.0"/>
  <testcase name="testEqualsWithNull[3]" classname="javafx.collections.ObservableSubListTest" time="0.0"/>
  <testcase name="testRemoveObjectNotExists[3]" classname="javafx.collections.ObservableSubListTest" time="0.0"/>
  <testcase name="testConcurrencyRemove0[3]" classname="javafx.collections.ObservableSubListTest" time="0.0"/>
  <testcase name="testConcurrencyRemoveAll[3]" classname="javafx.collections.ObservableSubListTest" time="0.0"/>
  <testcase name="testEqualsOnLongerList[3]" classname="javafx.collections.ObservableSubListTest" time="0.0"/>
  <testcase name="testConcurrencyContains[3]" classname="javafx.collections.ObservableSubListTest" time="0.001"/>
  <testcase name="testConcurrencyRetainAll[3]" classname="javafx.collections.ObservableSubListTest" time="0.0"/>
  <testcase name="testConcurrencyRemove[3]" classname="javafx.collections.ObservableSubListTest" time="0.0"/>
  <testcase name="testConcurrencySet[3]" classname="javafx.collections.ObservableSubListTest" time="0.0"/>
  <testcase name="testEqualsOnShorterList[3]" classname="javafx.collections.ObservableSubListTest" time="0.0"/>
  <testcase name="testEqualsWithNullOnShorterList[3]" classname="javafx.collections.ObservableSubListTest" time="0.0"/>
  <testcase name="testEqualsOnAnotherType[3]" classname="javafx.collections.ObservableSubListTest" time="0.0"/>
  <testcase name="testIndexOfWithNull[3]" classname="javafx.collections.ObservableSubListTest" time="0.0"/>
  <testcase name="testRemoveObjectExists[3]" classname="javafx.collections.ObservableSubListTest" time="0.0"/>
  <testcase name="testSubSubListAdd[3]" classname="javafx.collections.ObservableSubListTest" time="0.0"/>
  <testcase name="testSubSubListRemove[3]" classname="javafx.collections.ObservableSubListTest" time="0.0"/>
  <testcase name="testConcurrencyGet[3]" classname="javafx.collections.ObservableSubListTest" time="0.0"/>
  <testcase name="testEqualsWithNullOnLongerList[3]" classname="javafx.collections.ObservableSubListTest" time="0.0"/>
  <testcase name="testConcurrencyAdd[3]" classname="javafx.collections.ObservableSubListTest" time="0.0"/>
  <testcase name="testConcurrencyAddAll[3]" classname="javafx.collections.ObservableSubListTest" time="0.0"/>
  <testcase name="testConcurrencyClear[3]" classname="javafx.collections.ObservableSubListTest" time="0.0"/>
  <testcase name="testSubSubListSet[3]" classname="javafx.collections.ObservableSubListTest" time="0.0"/>
  <testcase name="testConcurrencyContainsAll[3]" classname="javafx.collections.ObservableSubListTest" time="0.0"/>
  <testcase name="testConcurrencyIsEmpty[3]" classname="javafx.collections.ObservableSubListTest" time="0.0"/>
  <testcase name="testConcurrencyIterator[3]" classname="javafx.collections.ObservableSubListTest" time="0.0"/>
  <testcase name="testConcurrencyRetainSize[3]" classname="javafx.collections.ObservableSubListTest" time="0.0"/>
  <testcase name="testIndexOf[3]" classname="javafx.collections.ObservableSubListTest" time="0.0"/>
  <testcase name="testRangeTooLow[3]" classname="javafx.collections.ObservableSubListTest" time="0.0"/>
  <testcase name="testSubSubList[3]" classname="javafx.collections.ObservableSubListTest" time="0.0"/>
  <testcase name="testWidestRange[3]" classname="javafx.collections.ObservableSubListTest" time="0.0"/>
  <testcase name="testRemoveIndex[3]" classname="javafx.collections.ObservableSubListTest" time="0.0"/>
  <testcase name="testRangeTooHigh[3]" classname="javafx.collections.ObservableSubListTest" time="0.0"/>
  <testcase name="testContainsAll[3]" classname="javafx.collections.ObservableSubListTest" time="0.0"/>
  <testcase name="testContainsNull[3]" classname="javafx.collections.ObservableSubListTest" time="0.0"/>
  <testcase name="testLastIndexOf[3]" classname="javafx.collections.ObservableSubListTest" time="0.001"/>
  <testcase name="testBadRange[3]" classname="javafx.collections.ObservableSubListTest" time="0.0"/>
  <testcase name="testToString[3]" classname="javafx.collections.ObservableSubListTest" time="0.0"/>
  <testcase name="testSize[3]" classname="javafx.collections.ObservableSubListTest" time="0.0"/>
  <testcase name="testIsEmpty[3]" classname="javafx.collections.ObservableSubListTest" time="0.0"/>
  <testcase name="testAdd[3]" classname="javafx.collections.ObservableSubListTest" time="0.0"/>
  <testcase name="testClear[3]" classname="javafx.collections.ObservableSubListTest" time="0.0"/>
  <testcase name="testSet[3]" classname="javafx.collections.ObservableSubListTest" time="0.0"/>
  <testcase name="testRetainAll[3]" classname="javafx.collections.ObservableSubListTest" time="0.0"/>
  <testcase name="testRemoveNull[3]" classname="javafx.collections.ObservableSubListTest" time="0.0"/>
  <testcase name="testAddAll[3]" classname="javafx.collections.ObservableSubListTest" time="0.0"/>
  <testcase name="testRemoveAll[3]" classname="javafx.collections.ObservableSubListTest" time="0.0"/>
  <testcase name="testContains[3]" classname="javafx.collections.ObservableSubListTest" time="0.0"/>
  <testcase name="testEquals[4]" classname="javafx.collections.ObservableSubListTest" time="0.0"/>
  <testcase name="testEqualsWithNull[4]" classname="javafx.collections.ObservableSubListTest" time="0.0"/>
  <testcase name="testRemoveObjectNotExists[4]" classname="javafx.collections.ObservableSubListTest" time="0.0"/>
  <testcase name="testConcurrencyRemove0[4]" classname="javafx.collections.ObservableSubListTest" time="0.0"/>
  <testcase name="testConcurrencyRemoveAll[4]" classname="javafx.collections.ObservableSubListTest" time="0.0"/>
  <testcase name="testEqualsOnLongerList[4]" classname="javafx.collections.ObservableSubListTest" time="0.0"/>
  <testcase name="testConcurrencyContains[4]" classname="javafx.collections.ObservableSubListTest" time="0.0"/>
  <testcase name="testConcurrencyRetainAll[4]" classname="javafx.collections.ObservableSubListTest" time="0.0"/>
  <testcase name="testConcurrencyRemove[4]" classname="javafx.collections.ObservableSubListTest" time="0.001"/>
  <testcase name="testConcurrencySet[4]" classname="javafx.collections.ObservableSubListTest" time="0.0"/>
  <testcase name="testEqualsOnShorterList[4]" classname="javafx.collections.ObservableSubListTest" time="0.0"/>
  <testcase name="testEqualsWithNullOnShorterList[4]" classname="javafx.collections.ObservableSubListTest" time="0.0"/>
  <testcase name="testEqualsOnAnotherType[4]" classname="javafx.collections.ObservableSubListTest" time="0.0"/>
  <testcase name="testIndexOfWithNull[4]" classname="javafx.collections.ObservableSubListTest" time="0.0"/>
  <testcase name="testRemoveObjectExists[4]" classname="javafx.collections.ObservableSubListTest" time="0.0"/>
  <testcase name="testSubSubListAdd[4]" classname="javafx.collections.ObservableSubListTest" time="0.0"/>
  <testcase name="testSubSubListRemove[4]" classname="javafx.collections.ObservableSubListTest" time="0.0"/>
  <testcase name="testConcurrencyGet[4]" classname="javafx.collections.ObservableSubListTest" time="0.0"/>
  <testcase name="testEqualsWithNullOnLongerList[4]" classname="javafx.collections.ObservableSubListTest" time="0.0"/>
  <testcase name="testConcurrencyAdd[4]" classname="javafx.collections.ObservableSubListTest" time="0.0"/>
  <testcase name="testConcurrencyAddAll[4]" classname="javafx.collections.ObservableSubListTest" time="0.0"/>
  <testcase name="testConcurrencyClear[4]" classname="javafx.collections.ObservableSubListTest" time="0.0"/>
  <testcase name="testSubSubListSet[4]" classname="javafx.collections.ObservableSubListTest" time="0.0"/>
  <testcase name="testConcurrencyContainsAll[4]" classname="javafx.collections.ObservableSubListTest" time="0.0"/>
  <testcase name="testConcurrencyIsEmpty[4]" classname="javafx.collections.ObservableSubListTest" time="0.0"/>
  <testcase name="testConcurrencyIterator[4]" classname="javafx.collections.ObservableSubListTest" time="0.0"/>
  <testcase name="testConcurrencyRetainSize[4]" classname="javafx.collections.ObservableSubListTest" time="0.0"/>
  <testcase name="testIndexOf[4]" classname="javafx.collections.ObservableSubListTest" time="0.0"/>
  <testcase name="testRangeTooLow[4]" classname="javafx.collections.ObservableSubListTest" time="0.0"/>
  <testcase name="testSubSubList[4]" classname="javafx.collections.ObservableSubListTest" time="0.0"/>
  <testcase name="testWidestRange[4]" classname="javafx.collections.ObservableSubListTest" time="0.0"/>
  <testcase name="testRemoveIndex[4]" classname="javafx.collections.ObservableSubListTest" time="0.0"/>
  <testcase name="testRangeTooHigh[4]" classname="javafx.collections.ObservableSubListTest" time="0.0"/>
  <testcase name="testContainsAll[4]" classname="javafx.collections.ObservableSubListTest" time="0.0"/>
  <testcase name="testContainsNull[4]" classname="javafx.collections.ObservableSubListTest" time="0.0"/>
  <testcase name="testLastIndexOf[4]" classname="javafx.collections.ObservableSubListTest" time="0.0"/>
  <testcase name="testBadRange[4]" classname="javafx.collections.ObservableSubListTest" time="0.0"/>
  <testcase name="testToString[4]" classname="javafx.collections.ObservableSubListTest" time="0.0"/>
  <testcase name="testSize[4]" classname="javafx.collections.ObservableSubListTest" time="0.0"/>
  <testcase name="testIsEmpty[4]" classname="javafx.collections.ObservableSubListTest" time="0.0"/>
  <testcase name="testAdd[4]" classname="javafx.collections.ObservableSubListTest" time="0.0"/>
  <testcase name="testClear[4]" classname="javafx.collections.ObservableSubListTest" time="0.0"/>
  <testcase name="testSet[4]" classname="javafx.collections.ObservableSubListTest" time="0.0"/>
  <testcase name="testRetainAll[4]" classname="javafx.collections.ObservableSubListTest" time="0.0"/>
  <testcase name="testRemoveNull[4]" classname="javafx.collections.ObservableSubListTest" time="0.0"/>
  <testcase name="testAddAll[4]" classname="javafx.collections.ObservableSubListTest" time="0.0"/>
  <testcase name="testRemoveAll[4]" classname="javafx.collections.ObservableSubListTest" time="0.0"/>
  <testcase name="testContains[4]" classname="javafx.collections.ObservableSubListTest" time="0.0"/>
  <system-out><![CDATA[]]></system-out>
  <system-err><![CDATA[]]></system-err>
</testsuite>
